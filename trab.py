# -- coding: utf-8 --
"""
Created on Fri Nov 29 00:30:22 2024

@author: zaywa
"""

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

import pandas as pd

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly as pt
import plotly.express as px

link = 'https://raw.githubusercontent.com/ricardorocha86/Datasets/refs/heads/master/State_of_data_BR_2023_Kaggle%20-%20df_survey_2023.csv'
df_o = pd.read_csv(link)
df = df_o.copy()

df.rename(columns={"('P1_a ', 'Idade')": 'Idade', "('P1_c ', 'Cor/raca/etnia')": 'Etnia',
                   "('P1_b ', 'Genero')": 'G√™nero', "('P2_f ', 'Cargo Atual')": 'Cargo',
                   "('P2_h ', 'Faixa salarial')": 'Faixa Salarial', "('P2_g ', 'Nivel')": 'N√≠vel',
                   "('P1_l ', 'Nivel de Ensino')": 'Escolaridade', "('P1_m ', '√Årea de Forma√ß√£o')": '√Årea',
                   "('P2_i ', 'Quanto tempo de experi√™ncia na √°rea de dados voc√™ tem?')": 'Experi√™ncia'
                   }, inplace=True)
df['Contagem'] = 1


# Defini√ß√£o das regi√µes
norte = ['AC', 'AM', 'AP', 'PA', 'RO', 'RR', 'TO']
nordeste = ['AL', 'BA', 'CE', 'MA', 'PB', 'PE', 'PI', 'RN', 'SE']
centro = ['DF', 'GO', 'MS', 'MT']
sudeste = ['ES', 'MG', 'RJ', 'SP']
sul = ['PR', 'RS', 'SC']

categorias = ["Norte", "Nordeste", "Centro-Oeste", "Sudeste", "Sul"]

# Fun√ß√£o para mapear estados para regi√µes
def estado_para_regiao(coluna_antiga, coluna_nova, df_migracao):
    condicao = [
        df_migracao[coluna_antiga].str.contains('|'.join(norte), na=False),
        df_migracao[coluna_antiga].str.contains('|'.join(nordeste), na=False),
        df_migracao[coluna_antiga].str.contains('|'.join(centro), na=False),
        df_migracao[coluna_antiga].str.contains('|'.join(sudeste), na=False),
        df_migracao[coluna_antiga].str.contains('|'.join(sul), na=False)
    ]
    df_migracao[coluna_nova] = np.select(condicao, categorias, default='Exterior')
    return df_migracao

# Supondo que o dataframe 'df' j√° tenha sido carregado anteriormente
df_migracao = df[["('P1_k ', 'Regiao de origem')", "('P1_i ', 'Estado onde mora')"]]
df_migracao.dropna(inplace=True)
df_migracao = df_migracao[df_migracao["('P1_k ', 'Regiao de origem')"] != df_migracao["('P1_i ', 'Estado onde mora')"]]

# Renomear as colunas para algo mais acess√≠vel
antigas = ["('P1_k ', 'Regiao de origem')", "('P1_i ', 'Estado onde mora')"]
novas = ["Regi√£o de Origem", "Regi√£o Atual"]

for antiga, nova in zip(antigas, novas):
    df_migracao = estado_para_regiao(antiga, nova, df_migracao)

###############

st.title("Trabalho Final do MiniCurso Python para Intelig√™ncia Artificial")

st.markdown("""

## An√°lise Descritiva da Base de Dados - Perfil do Profissional de Dados no Brasil
    
""")

st.markdown("---")


###############Op√ß√µes de Preferencia##########

st.markdown("""
### Op√ß√µes de Prefer√™ncia üé®

Antes das an√°liese, temos uma boa noticia para te dar: 

Voc√™ tem a possibilidade de escolher alguns detalhes para personalizar os gr√°ficos gerados. üìä

Nada muito complicado, apenas um toque para tornar a experi√™ncia ainda mais sua! üòä

√Ä esquerda da p√°gina, escolha a cor que mais agrada e aproveite os gr√°ficos de forma personalizada! üåà
""")


mapa_cores = {
    'Rosa': '#FF69B4',  # Rosa Intermedi√°rio (HotPink)
    'Laranja': '#FF8C00', # Laranja
    'Tomate': '#FF6347',  # Tomate
    'Verde': '#32CD32',   # Verde
    'Azul': '#4682B4',    # Azul Escuro (SteelBlue)
    'Cinza': '#808080'    # Cinza
}

mapa_cmap = {
    'Rosa': 'PuRd',       # Cores vermelhas
    'Laranja': 'Oranges', # Cores laranja
    'Tomate': 'Reds',     # Cores tomate
    'Verde': 'Greens',    # Cores verdes
    'Azul': 'Blues',      # Cores azuis
    'Cinza': 'Greys'      # Cores cinzas
}

# Sidebar para escolha da cor
with st.sidebar.expander("Escolha a cor para os gr√°ficos üé®", expanded=True):
    cor_nome = st.selectbox('Escolha uma cor de prefer√™ncia:',
                           ['Rosa', 'Laranja', 'Tomate', 'Verde', 'Azul', 'Cinza'])

    cor = mapa_cores[cor_nome]  # Cor para os gr√°ficos
    corm = mapa_cmap[cor_nome]  # Cores do cmap# Exibindo a cor selecionada na tela principal

st.markdown("---")


###############Descri√ß√£o Geral da Base##########################

st.markdown("""
### Descri√ß√£o Geral da Baseüîç

Antes de mais nada vamos lhe fornecer uma vis√£o 
geral dos dados, para que assim voc√™ possa melhor 
percorrer pelas sec√ß√µes a seguir. üöÄ

A base se refere ao **Perfil do Profissional de Dados 
no Brasil**. Sendo composta por de 5 293 
indiv√≠duos e 400 vari√°veis, mas, devido ao tempo, 
nossas an√°lises referem-se apenas a um subconjunto 
dessas vari√°veis. 

Esse subconjunto incluem as seguintes vari√°veis 
presentes na base:

- *√Årea de Forma√ß√£o*: A √°rea de forma√ß√£o acad√™mica desses profissionais.
- *Cargo*: Cargo atual ocupado pelos profissionais de dados.
- *Etnia*: Cor/ra√ßa/etnia dos participantes.
- *Escolaridade*: N√≠vel de escolaridade dos profissionais.
- *Estado onde Mora*: Estado em que o profissional reside atualmente.
- *Experi√™ncia*: O tempo de experi√™ncia na √°rea de dados.
- *Faixa Salarial*: Divis√£o da faixa salarial dos profissionais.
- *G√™nero*: Distribui√ß√£o de g√™nero entre os profissionais.
- *Idade*: Faixa et√°ria dos profissionais de dados.
- *N√≠vel*: N√≠vel de experi√™ncia ou senioridade dentro da √°rea de dados.
- *Regi√£o de Origem*: Local onde o profissional nasceu ou cresceu.

Essas vari√°veis ajudam a criar um panorama detalhado 
sobre a forma√ß√£o e o perfil dos profissionais de 
dados no Brasil, permitindo an√°lises mais 
profundas e insights valiosos sobre esse setor. üí°


""")

st.markdown("---")

###############Analises Univariada##########################

st.markdown("""
# An√°lise Univariada üìà

Nessa sec√ß√£o voc√™ pode visualizar alguns 
gr√°ficos, que propomos para a an√°lise 
univariada das vari√°veis da base. Al√©m disso, 
fornecemos tamb√©m uma an√°lise acerca dos 
gr√°ficos gerados, para que voc√™ n√£o 
precise ter esse trabalho. üß†

Tudo o que vai precisar fazer √© selecionar a 
vari√°vel desejada e se divertir com o processo!üôÉ

""")

###############Interpreta√ß√£o dos Gr√°ificos de Pizza##########################

idade1 = "A distribui√ß√£o et√°ria dos profissionais no mercado de dados no Brasil mostra uma predomin√¢ncia de jovens na faixa et√°ria de 20 a 30 anos, que representam uma parcela significativa da base. A maior concentra√ß√£o est√° na faixa de 26 anos, com 323 profissionais (6.1%), seguida pela faixa de 27 anos, com 374 profissionais (7.1%), indicando uma forte presen√ßa de profissionais em in√≠cio de carreira ou em transi√ß√£o para posi√ß√µes mais consolidadas. As faixas et√°rias mais altas, como 50 anos ou mais, t√™m uma representatividade bem menor, com apenas 1 a 2 profissionais em cada faixa et√°ria acima de 60 anos, evidenciando uma baixa participa√ß√£o de profissionais mais velhos no setor. Esse cen√°rio reflete um mercado de dados mais jovem, com a maioria dos profissionais em fases iniciais ou intermedi√°rias de sua carreira."

faixasalarial1 = "A distribui√ß√£o salarial no mercado de dados no Brasil revela uma clara concentra√ß√£o nas faixas intermedi√°rias, com destaque para o intervalo de 8 001 a 12 000 reais, com 1 026 profissionais, seguido por 4 001 a 6 000 reais, com 745 profissionais, e 12 001 a 16 000 reais, com 650 profissionais. As faixas salariais mais altas, como 16 001 a 20 000 reais (328 profissionais) e Acima de 40 000  reais (72 profissionais), t√™m uma presen√ßa mais modesta, sugerindo que apenas uma pequena parcela dos profissionais alcan√ßam esses valores. J√° as faixas mais baixas, como Menos de 1 000 reais (30 profissionais), t√™m uma representa√ß√£o reduzida, indicando que a maioria dos profissionais est√° concentrada nas faixas intermedi√°rias ou mais altas."

experiencia1 = "A experi√™ncia tamb√©m √© um fator importante nesse mercado. Cerca de 40% dos profissionais (aproximadamente 2.000 indiv√≠duos) possuem entre 1 e 4 anos de experi√™ncia, o que mostra que a maior parte da base est√° em fase de forma√ß√£o ou em transi√ß√£o para cargos mais seniores. Esse dado sugere uma alta rotatividade e a constante entrada de novos profissionais no mercado de dados."
experiencia2 = "Outro dado relevante √© que 3% (aproximadamente 160 profissionais) s√£o iniciantes, com nenhuma experi√™ncia formal na √°rea, mas provavelmente com potencial para crescer √† medida que o mercado se expande e a demanda por dados aumenta."
experiencia3 = "Entre os profissionais mais experientes, h√° um equil√≠brio entre as faixas de 4 a 6 anos e 7 a 10 anos de experi√™ncia, com um n√∫mero ligeiramente maior de profissionais na faixa de 4 a 6 anos. Isso indica uma estabiliza√ß√£o na distribui√ß√£o de experi√™ncia, com uma concentra√ß√£o significativa de profissionais j√° consolidados entre 4 e 10 anos de atua√ß√£o no setor de dados."

regiao1 ="A tabela revela a distribui√ß√£o dos profissionais por regi√£o de origem e localiza√ß√£o atual, mostrando uma forte concentra√ß√£o nas regi√µes mais desenvolvidas do Brasil. A regi√£o Sudeste destaca-se com a maior quantidade de profissionais, com 121 oriundos dessa regi√£o e 235 de outras. Isso sugere que o Sudeste √© um polo central tanto para a origem quanto para a atual localiza√ß√£o dos profissionais, atraindo um grande n√∫mero de talentos de diversas partes do pa√≠s. Al√©m disso, o Sudeste √© tamb√©m a principal regi√£o de destino, com destaque para profissionais provenientes de Nordeste e Centro-Oeste."
regiao2 ="O Nordeste tem uma distribui√ß√£o mais equilibrada, com 29 profissionais oriundos da pr√≥pria regi√£o e 135 de outras √°reas. Isso demonstra uma migra√ß√£o consider√°vel para o Nordeste, que pode ser explicada por fatores como o crescimento de setores e a busca por novas oportunidades nesse territ√≥rio. J√° o Sul tem uma distribui√ß√£o similar, com 81 profissionais atualmente na regi√£o e 58 oriundos de outros locais. A presen√ßa de profissionais do Centro-Oeste na regi√£o Sul tamb√©m indica um movimento migrat√≥rio, possivelmente em busca de melhores oportunidades de trabalho."
regiao3 ="Por outro lado, as regi√µes Centro-Oeste e Norte mostram uma concentra√ß√£o maior de profissionais locais. O Centro-Oeste tem 22 profissionais em sua pr√≥pria regi√£o e 12 oriundos de outras √°reas, enquanto o Norte tem 17 na regi√£o e 16 provenientes de outras. Essas duas regi√µes tendem a manter uma maior parte de sua for√ßa de trabalho local, com uma mobilidade migrat√≥ria mais baixa. A regi√£o Exterior tem uma representa√ß√£o menor, com destaque para a presen√ßa de profissionais provenientes do Sudeste e Nordeste."

dic_pizza = {
    "Etnia": (
        "A an√°lise da etnia dos profissionais tamb√©m revela um panorama interessante. "
        "A maioria dos indiv√≠duos na base se identifica como branca, representando 65% (3.414) dos participantes. "
        "Em seguida, pardos e pretos somam 32% (1.668), o que representa menos da metade do n√∫mero de indiv√≠duos identificados como brancos. "
        "Pode-se, assim, afirmar que o mercado de Dados no Brasil est√°, de forma esmagadora, sendo 'dominado' por brancos.<br><br>"
        
        "Por outro lado, as etnias amarela e ind√≠gena t√™m uma presen√ßa mais modesta, representando apenas 3% (159) dos profissionais, "
        "o que pode refletir um padr√£o demogr√°fico mais restrito, ainda em processo de inclus√£o em √°reas mais tecnol√≥gicas."
    ),
    "G√™nero": (
        "A distribui√ß√£o de g√™nero no mercado de dados no Brasil √© predominantemente masculina, com 75% (3.905 profissionais) "
        "se identificando como homens, enquanto 24% (1.293 profissionais) s√£o mulheres. "
        "A presen√ßa de profissionais que se identificam com outro g√™nero √© bastante pequena, representando apenas 1% (9 profissionais) da base. "
        "Isso indica uma disparidade significativa entre os g√™neros, com a maioria dos cargos ainda sendo ocupada por homens."
    ),
    "Escolaridade": (
        "Em rela√ß√£o √† escolaridade, a base de profissionais apresenta uma diversidade interessante. "
        "34% (1.818) dos indiv√≠duos possuem p√≥s-gradua√ß√£o, destacando o alto n√≠vel de especializa√ß√£o presente no mercado de dados. "
        "Esse n√∫mero √© similar ao de profissionais com gradua√ß√£o (tamb√©m 34%, ou 1.798), mostrando que a forma√ß√£o superior continua sendo "
        "um pr√©-requisito essencial, tanto para cargos de an√°lise quanto para cargos mais t√©cnicos.<br><br>"
        
        "Por outro lado, 2% (105) dos profissionais n√£o possuem gradua√ß√£o, uma porcentagem pequena, mas que pode indicar a presen√ßa de "
        "profissionais com trajet√≥rias n√£o convencionais ou autodidatas, especialmente em campos t√©cnicos onde a experi√™ncia pr√°tica "
        "muitas vezes suplanta a forma√ß√£o acad√™mica formal. J√° os PhDs ou Doutores representam 4% (210) da base, o que reflete a presen√ßa "
        "de especialistas com um n√≠vel de forma√ß√£o avan√ßado, muitas vezes voltados para pesquisas, desenvolvimento de novos m√©todos ou "
        "inova√ß√µes na √°rea de dados."
    ),
    "N√≠vel": (
        "A distribui√ß√£o dos n√≠veis de experi√™ncia no mercado de dados no Brasil √© bastante equilibrada, com *20% (1.046 profissionais)* "
        "em cargos *juniores*, **27% (1.419 profissionais)* em cargos *s√™niores*, **26% (1.419 profissionais)* em cargos *plenos* e "
        "*27% (1.436 profissionais)* em cargos *NA*. O fato de haver uma quantidade equivalente de profissionais em cargos **plenos* e "
        "*s√™niores* √© surpreendente, indicando que a √°rea de dados n√£o s√≥ est√° em constante renova√ß√£o, mas tamb√©m mant√©m um bom equil√≠brio "
        "entre profissionais com menos e mais experi√™ncia, refletindo uma estabilidade na estrutura de carreiras dentro do setor.<br><br>"
        
        "Al√©m disso, a presen√ßa de 27% (1.436 profissionais) com valores faltantes (NA) √© uma quest√£o relevante, pois indica uma lacuna "
        "significativa nas informa√ß√µes sobre o n√≠vel de experi√™ncia de uma parte expressiva dos profissionais. Essa falta de dados claros "
        "prejudica a an√°lise precisa do perfil do mercado, tornando dif√≠cil entender a real composi√ß√£o das carreiras no setor."
    ),
    "Cargo": (
        "Devido √† similaridade entre algumas profiss√µes, ou por conveni√™ncia devido √† baixa frequ√™ncia de observa√ß√µes, agrupamos as profiss√µes "
        "em categorias conforme apresentado na tabela ap√≥s o texto. "
        "Quase 50% (1 647) dos profissionais dessa base ocupam o cargo de Analista de Dados, o que mostra como essa profiss√£o tem se destacado "
        "e se tornado essencial √† medida que mais empresas investem em dados para tomar decis√µes estrat√©gicas.<br><br>"
        
        "Por outro lado, Estat√≠sticos e Economistas s√£o as profiss√µes com a menor representatividade, somando menos de 1% da base (26) ‚Äì uma evid√™ncia "
        "de que o mercado tem se concentrado mais em habilidades voltadas para a pr√°tica e o uso de dados no dia a dia das empresas.<br><br>"
        
        "√â interessante notar que, juntos, os cargos de Engenheiro de Dados e Cientista de Dados quase chegam ao n√∫mero de Analistas de Dados (1 605). "
        "Essa tr√≠ade ‚Äì Analistas, Engenheiros e Cientistas de Dados ‚Äì responde por mais de 80% da base (3 248), o que revela uma clara tend√™ncia: "
        "o mercado est√° cada vez mais centrado em profissionais que dominam o universo dos dados, seja para analis√°-los, estrutur√°-los "
        "ou transform√°-los em insights valiosos."
    )
}


###############Gr√°ificos##########################

st.markdown("""
## Gr√°ficos de pizza!üòãüçïüò±
""")

va_pizza = st.selectbox('Escolha uma vari√°vel para an√°lise:',
                                    sorted(['Etnia', 'G√™nero', 'Escolaridade', 'N√≠vel', 'Cargo']))

st.markdown(f"<h3 style='text-align: center'>Gr√°fico de Setores de {va_pizza}</h3>", unsafe_allow_html=True)


if va_pizza == 'Cargo':
    
    analista = ['Analista de Neg√≥cios/Business Analyst', 'Analista de BI/BI Analyst', 'Analista de Dados/Data Analyst', 'Analista de Intelig√™ncia de Mercado/Market Intelligence']
    cientista = ['Cientista de Dados/Data Scientist', 'Engenheiro de Machine Learning/ML Engineer/AI Engineer']
    engenheiro = ['Engenheiro de Dados/Arquiteto de Dados/Data Engineer/Data Architect', 'DBA/Administrador de Banco de Dados', 'Analytics Engineer']
    ti = ['Analista de Suporte/Analista T√©cnico', 'Desenvolvedor/ Engenheiro de Software/ Analista de Sistemas']
    outro = ['Outra Op√ß√£o', 'Outras Engenharias (n√£o inclui dev)']
    EE = ['Economista', 'Estat√≠stico']
    prof = ['Professor/Pesquisador']
    
    cargo_original = df['Cargo'].value_counts().reset_index(name='Contagem')
    cargo_original.columns = ['Cargo', 'Contagem']

    def categorizar_cargo(cargo):
        if cargo in analista:
            return 'Analista de Dados'
        elif cargo in cientista:
            return 'Cientista de Dados'
        elif cargo in engenheiro:
            return 'Engenheiro de Dados'
        elif cargo in ti:
            return 'Software'
        elif cargo in outro:
            return 'Outra Op√ß√£o'
        elif cargo in EE:
            return 'EE'
        elif cargo in prof:
            return 'Professor/Pesquisador'
        else:
            return 'Outros'

    cargo_original['Categoria'] = cargo_original['Cargo'].apply(categorizar_cargo)

    # Adicionando uma linha de total
    total_linhas = cargo_original['Contagem'].sum()
    total_row = pd.DataFrame([['Total', total_linhas, 'Total']], columns=['Cargo', 'Contagem', 'Categoria'])
    cargo_original = pd.concat([cargo_original, total_row], ignore_index=True)

    # Ordenando a tabela pela coluna 'Categoria' (segunda coluna)
    cargo_original = cargo_original.sort_values(by='Categoria', ascending=True)

    # Reorganizando as colunas para que 'Contagem' seja a √∫ltima
    cargo_original = cargo_original[['Cargo', 'Categoria', 'Contagem']]
    
    # Substituindo os cargos para as categorias simplificadas
    df['Cargo'] = df['Cargo'].replace(analista, 'Analista de Dados')
    df['Cargo'] = df['Cargo'].replace(cientista, 'Cientista de Dados')
    df['Cargo'] = df['Cargo'].replace(engenheiro, 'Engenheiro de Dados')
    df['Cargo'] = df['Cargo'].replace(ti, 'Software')
    df['Cargo'] = df['Cargo'].replace(outro, 'Outra Op√ß√£o')
    df['Cargo'] = df['Cargo'].replace(EE, 'EE')

    # Calculando a contagem de cada cargo ap√≥s as substitui√ß√µes
    cargo_contagem = df.groupby('Cargo')['Cargo'].count().reset_index(name='Contagem')

    # Gr√°fico de setores para "Cargo"
    st.subheader(f"Gr√°fico de Setores de {va_pizza}")
    fig = px.pie(cargo_contagem, values="Contagem", names="Cargo", title="Distribui√ß√£o de Cargos")
    st.plotly_chart(fig)

    st.markdown(f"<h3 style='text-align: center'>{va_pizza}</h3>", unsafe_allow_html=True)

    # Display dictionary content with line breaks
    st.markdown(dic_pizza[va_pizza], unsafe_allow_html=True)

    st.subheader("Tabela com Quantidades Originais de Cargos")
    st.dataframe(cargo_original)  # Exibe a tabela com os cargos originais sem agrupamento

else: 
    # Pie chart
    fig = px.pie(df, values="Contagem", names=va_pizza)
    #fig.update_layout(title_x=0.5)
    st.plotly_chart(fig)

    # Centered title for va_pizza
    st.markdown(f"<h3 style='text-align: center'>{va_pizza}</h3>", unsafe_allow_html=True)

    # Display dictionary content with line breaks
    st.markdown(dic_pizza[va_pizza], unsafe_allow_html=True)

variavel_selecionada = st.selectbox('Escolha uma vari√°vel para an√°lise:',
                                    sorted(['Idade', 'Regi√£o', 'Faixa Salarial', 'Experi√™ncia']))


if variavel_selecionada == 'Idade':
    
    st.subheader(f"Histograma de {variavel_selecionada}")
    plt.figure(figsize=(18, 6))
    plt.hist(df[variavel_selecionada], edgecolor='black', bins=25, color=cor)
    plt.title(f"Histograma da {variavel_selecionada}")
    plt.xlabel(variavel_selecionada)
    plt.ylabel("Frequ√™ncia")    
    
    idade_contagem = df['Idade'].value_counts().sort_index()
    
    total_idade = len(df)
    idade_porcentagem = (idade_contagem / total_idade) * 100
    
    tabela_idade = pd.DataFrame({
        'Idade': idade_contagem.index,
        'Contagem': idade_contagem.values,
        'Porcentagem (%)': idade_porcentagem.round(1).values
    })
    
    st.pyplot(plt)
    st.write(idade1)
    st.table(tabela_idade)

elif variavel_selecionada == 'Faixa Salarial':
    ordem_faixa_salarial = df['Faixa Salarial'].value_counts().index.tolist()

    st.subheader('Distribui√ß√£o de Faixa Salarial')
    
    # Contagem das faixas salariais
    faixa_salarial_contagem = df['Faixa Salarial'].value_counts().sort_index()
    
    # Calculando a porcentagem de cada faixa salarial
    total_faixa = len(df)
    faixa_salarial_porcentagem = (faixa_salarial_contagem / total_faixa) * 100
    
    # Criando um DataFrame com as contagens e porcentagens
    tabela_faixa_salarial = pd.DataFrame({
        'Faixa Salarial': faixa_salarial_contagem.index,
        'Contagem': faixa_salarial_contagem.values,
        'Porcentagem (%)': faixa_salarial_porcentagem.round(1).values
    })
    
    # Plotando o gr√°fico
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.countplot(data=df, x='Faixa Salarial', order=ordem_faixa_salarial, ax=ax, color=cor)

    # Adicionando as porcentagens no gr√°fico
    for p in ax.patches:
        height = p.get_height()
        percentage = (height / total_faixa) * 100
        ax.text(
            p.get_x() + p.get_width() / 2, height + 1, f'{percentage:.1f}%', 
            ha='center', va='bottom', fontsize=10, color='black'
        )

    ax.set_title('Distribui√ß√£o de Faixa Salarial', fontsize=16)
    ax.set_xlabel('Faixa Salarial', fontsize=12)
    ax.set_ylabel('Contagem', fontsize=12)
    ax.tick_params(axis='x', rotation=45)
    
    st.pyplot(fig)
    st.write(faixasalarial1)
    st.table(tabela_faixa_salarial)


elif variavel_selecionada == 'Cargo1':
    cargo_original = df['Cargo'].value_counts().reset_index(name='Contagem')
    cargo_original.columns = ['Cargo', 'Contagem']

    # Exibindo a tabela com os cargos originais
    st.subheader("Tabela com Quantidades Originais de Cargos")
    st.dataframe(cargo_original)  # Exibe a tabela com os cargos originais sem agrupamento

    st.write(cargo1)

    analista = ['Analista de Neg√≥cios/Business Analyst', 'Analista de BI/BI Analyst', 'Analista de Dados/Data Analyst', 'Analista de Intelig√™ncia de Mercado/Market Intelligence']
    cientista = ['Cientista de Dados/Data Scientist', 'Engenheiro de Machine Learning/ML Engineer/AI Engineer']
    engenheiro = ['Engenheiro de Dados/Arquiteto de Dados/Data Engineer/Data Architect', 'DBA/Administrador de Banco de Dados', 'Analytics Engineer']
    ti = ['Analista de Suporte/Analista T√©cnico', 'Desenvolvedor/ Engenheiro de Software/ Analista de Sistemas']
    outro = ['Outra Op√ß√£o', 'Outras Engenharias (n√£o inclui dev)']
    EE = ['Economista', 'Estat√≠stico']

    # Substituindo os cargos para as categorias simplificadas
    df['Cargo'] = df['Cargo'].replace(analista, 'Analista de Dados')
    df['Cargo'] = df['Cargo'].replace(cientista, 'Cientista de Dados')
    df['Cargo'] = df['Cargo'].replace(engenheiro, 'Engenheiro de Dados')
    df['Cargo'] = df['Cargo'].replace(ti, 'Software')
    df['Cargo'] = df['Cargo'].replace(outro, 'Outra Op√ß√£o')
    df['Cargo'] = df['Cargo'].replace(EE, 'EE')

    # Calculando a contagem de cada cargo
    cargo_contagem = df.groupby('Cargo')['Cargo'].count().reset_index(name='Contagem')

    # Gr√°fico de setores para "Cargo"
    st.subheader(f"Gr√°fico de Setores de {variavel_selecionada}")
    fig = px.pie(cargo_contagem, values="Contagem", names="Cargo", title="Distribui√ß√£o de Cargos")
    st.plotly_chart(fig)

elif variavel_selecionada == 'Etnia':
    st.subheader(f"Gr√°fico de Setores de {variavel_selecionada}")
    fig = px.pie(df, values="Contagem", names=variavel_selecionada)
    st.plotly_chart(fig)
    
    st.write(etnia1)
    st.write(etnia2)

elif variavel_selecionada == 'Experi√™ncia':
    
    # Calcular a ordem das categorias de "Experi√™ncia"
    ordem_experiencia = df['Experi√™ncia'].value_counts().index.tolist()

    # Gr√°fico: Distribui√ß√£o de Experi√™ncia
    st.subheader('Distribui√ß√£o de Experi√™ncia')
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # Gr√°fico de barras: Distribui√ß√£o de Experi√™ncia
    sns.countplot(data=df, x='Experi√™ncia', order=ordem_experiencia, ax=ax, color=cor)

    # Calcular e exibir a porcentagem para "Experi√™ncia"
    total_experiencia = len(df)
    for p in ax.patches:
        height = p.get_height()
        percentage = (height / total_experiencia) * 100
        ax.text(
            p.get_x() + p.get_width() / 2, height + 1, f'{percentage:.1f}%', 
            ha='center', va='bottom', fontsize=10, color='black'
        )

    # Ajustes no gr√°fico
    ax.set_title('Distribui√ß√£o de Experi√™ncia', fontsize=16)
    ax.set_xlabel('Experi√™ncia', fontsize=12)
    ax.set_ylabel('Contagem', fontsize=12)
    ax.tick_params(axis='x', rotation=45)

    # Exibi√ß√£o do gr√°fico no Streamlit
    st.pyplot(fig)
    st.write(experiencia1)
    st.write(experiencia2)
    st.write(experiencia3)

elif variavel_selecionada == 'Regi√£o':
    tabela_migracao = pd.crosstab(df_migracao['Regi√£o de Origem'], df_migracao['Regi√£o Atual'])

# Exibir o heatmap da tabela de migra√ß√£o
    opcao_selecao = st.radio('Escolha a vers√£o para visualiza√ß√£o:', 
                         ('Contagem', 'Propor√ß√£o'))

# Calcular as tabelas e a vers√£o normalizada
    tabela_migracao = pd.crosstab(df_migracao['Regi√£o de Origem'], df_migracao['Regi√£o Atual'])
    tabela_migracao_proporcional = tabela_migracao.div(tabela_migracao.sum(axis=1), axis=0)

# Condicional para escolher qual vers√£o mostrar
    if opcao_selecao == 'Contagem':
        tabela_exibicao = tabela_migracao
        titulo_grafico = 'Regi√£o de Origem vs Regi√£o Atual (Contagem)'
        fmt = "d"  # Formato de contagem
    else:
        tabela_exibicao = tabela_migracao_proporcional
        titulo_grafico = 'Regi√£o de Origem vs Regi√£o Atual (Propor√ß√£o)'
        fmt = ".2f"  # Formato normalizado com 2 casas decimais

    st.subheader(f'Heatmap: {titulo_grafico}')
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.heatmap(tabela_exibicao, annot=True, cmap=corm, fmt=fmt, ax=ax)
    plt.title(titulo_grafico, fontsize=16)
    plt.xlabel('Regi√£o Atual', fontsize=12)
    plt.ylabel('Regi√£o de Origem', fontsize=12)
    st.pyplot(fig)

    #st.subheader('Tabela de Migra√ß√£o entre Regi√µes')
    #st.write(tabela_migracao)
    st.write(regiao1)
    st.write(regiao2)
    st.write(regiao3)



else:
    st.write("Escolha uma vari√°vel v√°lida.")

st.markdown("---")

###############Analise Bivariada##########################

st.markdown("""
### An√°lises Bivariada üåê

Nesta se√ß√£o, voc√™ poder√° visualizar 
gr√°ficos que propomos para analisar a 
rela√ß√£o entre duas vari√°veis da base. 

Divirta-se ‚ú®

""")


###############Interpreta√ß√£o dos Gr√°ificos##########################

idade1 = ""

etnia1 = ""

g√™nero1 = ""

faixasalarial1 = ""

escolaridade1 = ""

n√≠vel1 = ""

cargo1 = "Devido a similaridade entre algumas profiss√µes, ou por conveni√™ncia devido √† baixa frequ√™ncia de observa√ß√µes,agrupamos as profiss√µes de sumarizamos seus originais valores na tabela a baixo"
cargo2 = ""

experi√™ncia1 = ""

###############Gr√°ificos##########################

variavel_selecionada = st.selectbox('Escolha um cruzamento de vari√°veis para an√°lise:',
                                    sorted(['Etnia X Idade', 'Etnia X Faixa Salarial', 'Faixa Salarial X Idade','Experi√™ncia X Faixa Salarial', #'Cargo X N√≠vel', 'Cargo X N√≠vel X Sal√°rio'
                                            ]))


if variavel_selecionada == 'Etnia X Idade':
    
    # Calcular a m√©dia das idades por Etnia
    Idades_Etnia = df.groupby('Etnia')['Idade'].mean().sort_values(ascending=True).index

    # Criar o gr√°fico Boxplot
    fig = px.box(df, x="Etnia", y="Idade",
                 labels={"Etnia": "Etnia", "Idade": "Idades"},
                 title="Boxplot das Idades por Etnia",
                 category_orders={"Etnia": Idades_Etnia})

    fig.update_traces(marker=dict(color=cor))

    fig.update_layout(title_x=0.5)

    # Exibir o gr√°fico no Streamlit
    st.plotly_chart(fig)

elif variavel_selecionada == 'Etnia X Faixa Salarial':

    faixas_salariais = {
        "Menos de R$ 1.000/m√™s": 500,
        "de R$ 1.001/m√™s a R$ 2.000/m√™s": 1500,
        "de R$ 2.001/m√™s a R$ 3.000/m√™s": 2500,
        "de R$ 3.001/m√™s a R$ 4.000/m√™s": 3500,
        "de R$ 4.001/m√™s a R$ 6.000/m√™s": 5000,
        "de R$ 6.001/m√™s a R$ 8.000/m√™s": 7000,
        "de R$ 8.001/m√™s a R$ 12.000/m√™s": 10000,
        "de R$ 12.001/m√™s a R$ 16.000/m√™s": 14000,
        "de R$ 16.001/m√™s a R$ 20.000/m√™s": 18000,
        "de R$ 20.001/m√™s a R$ 25.000/m√™s": 22500,
        "de R$ 25.001/m√™s a R$ 30.000/m√™s": 27500,
        "de R$ 30.001/m√™s a R$ 40.000/m√™s": 35000,
        "Acima de R$ 40.001/m√™s": 45000
    }

    df['Faixa Salarial Num√©rica'] = df['Faixa Salarial'].map(faixas_salariais)

    # Calcular a m√©dia dos sal√°rios por Etnia
    salario_etnia = df.groupby('Etnia')['Faixa Salarial Num√©rica'].mean().sort_values(ascending=True).index

    # Criar o gr√°fico Boxplot para Sal√°rios X Etnia
    fig = px.box(df, x="Etnia", y="Faixa Salarial Num√©rica",
                 labels={"Etnia": "Etnia", "Faixa Salarial Num√©rica": "Faixa Salarial"},
                 title="Boxplot da Faixa Salarial M√©dios por Etnia",
                 category_orders={"Etnia": salario_etnia})

    fig.update_traces(marker=dict(color=cor))

    fig.update_layout(title_x=0.5)

    st.plotly_chart(fig)

elif variavel_selecionada == 'Faixa Salarial X Idade':
    # Criar o gr√°fico Boxplot de Idades por Faixa Salarial, com a ordena√ß√£o por 'salarios'
    fig = px.box(df.sort_values(by='Faixa Salarial'), x='Faixa Salarial', y="Idade",
                 labels={'Faixa salarial': "Faixa Salarial", "Idade": "Idade"},
                 title="Boxplot das Idades por Faixa Salarial", color="Faixa Salarial")

    # Alterar a cor para uma cor espec√≠fica
    fig.update_traces(marker=dict(color=cor))  # cor deve ser um valor v√°lido como 'red', 'blue', ou c√≥digo hexadecimal como '#FF5733'

    # Ajustar o layout do gr√°fico
    fig.update_layout(title_x=0.5)

    # Ajustar a rota√ß√£o dos r√≥tulos do eixo X
    fig.update_xaxes(tickangle=90)

    # Exibir o gr√°fico no Streamlit
    st.plotly_chart(fig)


elif variavel_selecionada == 'Experi√™ncia X Faixa Salarial':
    
    ordem_faixas = [
    "Menos de R$ 1.000/m√™s",
    "de R$ 1.001/m√™s a R$ 2.000/m√™s",
    "de R$ 2.001/m√™s a R$ 3.000/m√™s",
    "de R$ 3.001/m√™s a R$ 4.000/m√™s",
    "de R$ 4.001/m√™s a R$ 6.000/m√™s",
    "de R$ 6.001/m√™s a R$ 8.000/m√™s",
    "de R$ 8.001/m√™s a R$ 12.000/m√™s",
    "de R$ 12.001/m√™s a R$ 16.000/m√™s",
    "de R$ 16.001/m√™s a R$ 20.000/m√™s",
    "de R$ 20.001/m√™s a R$ 25.000/m√™s",
    "de R$ 25.001/m√™s a R$ 30.000/m√™s",
    "de R$ 30.001/m√™s a R$ 40.000/m√™s",
    "Acima de R$ 40.001/m√™s"
    ]
    
    ordem_exp = [
    "Sem experi√™ncia",
    "Menos de 1 ano",
    "de 1 a 2 anos",
    "de 3 a 4 anos",
    "de 4 a 6 anos",
    "de 7 a 10 anos",
    "Mais de 10 anos"
    ]
    # Adicionar um radio button para o usu√°rio escolher entre "Contagem" ou "Normalizada"
    opcao_selecao = st.radio('Escolha a vers√£o para visualiza√ß√£o:', 
                             ('Contagem', 'Normalizada'))

# Definir a tabela a ser exibida com base na sele√ß√£o
    tabela_exp_faixa = pd.crosstab(df['Faixa Salarial'], df['Experi√™ncia'])
    tabela_exp_faixa = tabela_exp_faixa.reindex(index=ordem_faixas, columns=ordem_exp, fill_value=0)

# Calcular a vers√£o normalizada
    tabela_exp_faixa_p = tabela_exp_faixa.div(tabela_exp_faixa.sum(axis=1), axis=0)

# Condicional para escolher qual vers√£o mostrar
    if opcao_selecao == 'Contagem':
        tabela_exibicao = tabela_exp_faixa
        titulo_grafico = 'Experi√™ncia vs Faixa Salarial (Contagem)'
        fmt = "d"  # Formato de contagem
    else:
        tabela_exibicao = tabela_exp_faixa_p
        titulo_grafico = 'Experi√™ncia vs Faixa Salarial (Normalizado)'
        fmt = ".3f"  # Formato normalizado com 3 casas decimais

    fig, ax = plt.subplots(figsize=(10, 6))
    sns.heatmap(tabela_exibicao, annot=True, cmap=corm, fmt=fmt, ax=ax)
    plt.title(titulo_grafico, fontsize=16)
    plt.xlabel('Experi√™ncia', fontsize=12)
    plt.ylabel('Faixa Salarial', fontsize=12)
    st.pyplot(fig)

elif variavel_selecionada == 'Cargo X N√≠vel':
    
    def faixa_para_valor(faixa):
        try:
            # Extrair os valores m√≠nimo e m√°ximo de cada faixa
            valores = faixa.split(" a ")
            min_valor = int(valores[0].replace("de R$", "").replace("m√™s", "").replace(",", "").strip())
            max_valor = int(valores[1].replace("R$", "").replace("m√™s", "").replace(",", "").strip())
            
            # Retornar a m√©dia da faixa salarial
            return (min_valor + max_valor) / 2
        except Exception as e:
            return None  # Caso o formato n√£o seja esperado, retorna None

    # Aplicar a fun√ß√£o para converter 'Faixa Salarial' para valores num√©ricos
    df['Faixa Salarial Valor'] = df['Faixa Salarial'].apply(faixa_para_valor)

    nivel_agrupado = df.groupby(["Cargo", "N√≠vel"], as_index=False)["Faixa Salarial Valor"].mean()

    # Ordenar os cargos com base na m√©dia dos sal√°rios
    salarios_cargo = df.groupby('Cargo')['Faixa Salarial Valor'].mean().sort_values(ascending=True).index

    # Criar o gr√°fico de barras
    fig = px.bar(nivel_agrupado, x="Cargo", y="Faixa Salarial Valor",
                 labels={"Cargo": "Cargos", "Faixa Salarial Valor": "Faixa Salarial", "N√≠vel": "N√≠vel"},
                 title="Sal√°rios M√©dios por Cargos e N√≠vel de Senioridade",
                 color="N√≠vel", barmode="group",
                 category_orders={'Cargo': salarios_cargo})

    # Ajustar o layout do gr√°fico
    fig.update_layout(title_x=0.5)

    # Exibir o gr√°fico no Streamlit
    st.plotly_chart(fig)
   
    
   
elif variavel_selecionada == 'Cargo X N√≠vel X Sal√°rio':
    
    nivel_agrupado = df.groupby(["Cargo", "N√≠vel"], as_index=False)["Faixa Salarial"].mean()


    salarios_cargo = df.groupby('Cargo')['Faixa Salarial'].mean().sort_values(ascending=True).index


    fig = px.bar(nivel_agrupado, x="Cargo", y="Faixa Salarial",
             labels={"Cargo": "Cargos", "Faixa Salarial": "Sal√°rios", "N√≠vel": "N√≠vel"},
             title="Faixa Salarial M√©dia por Cargos e N√≠vel de Senioridade",
             color="N√≠vel", barmode="group",
             category_orders={'Cargo': salarios_cargo})

    fig.update_layout(title_x=0.5)

    st.plotly_chart(fig)
    
    nivel_agrupado = df.groupby(["Cargo", "N√≠vel"], as_index=False)["salarios"].mean()


    salarios_cargo = df.groupby('Cargo')['salarios'].mean().sort_values(ascending=True).index


    fig = px.bar(nivel_agrupado, x="Cargo", y="salarios",
             labels={"Cargo": "Cargos", "salarios": "Sal√°rios", "N√≠vel": "N√≠vel"},
             title="Sal√°rios M√©dios por Cargos e N√≠vel de Senioridade",
             color="N√≠vel", barmode="group",
             category_orders={'Cargo': salarios_cargo})

    fig.update_layout(title_x=0.5)

    st.plotly_chart(fig)