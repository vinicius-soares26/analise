# %% [1] Importando os pacotes e carregando os dados, etc
# Importando pacotes
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import plotly as pt
import plotly.express as px
import plotly.graph_objects as go

# Carregando dados
from funcoes.tratamento import TratamentoDados

tratador = TratamentoDados()

df_migracao = tratador.retornar_migracao()

# %% T√≠tulo, e settings

st.markdown("""
    <div style="text-align: center;">
        <h1> An√°lise dos Sal√°rios </h1>
""", unsafe_allow_html=True)

st.markdown("""
Est√° curioso(a) para saber quanto ganham os profissionais da √°rea que pensa em entrar? 
""")

gradientes = {
    'Rosa': 'PuRd',       # Cores vermelhas
    'Laranja': 'Oranges', # Cores laranja
    'Tomate': 'Reds',     # Cores tomate
    'Verde': 'Greens',    # Cores verdes
    'Azul': 'Blues',      # Cores azuis
    'Cinza': 'Greys'      # Cores cinzas
}

# Sidebar para escolha da cor
with st.sidebar.expander("Escolha a cor para os gr√°ficos üé®", expanded=True):
    cor_nome = st.selectbox('Escolha uma cor de prefer√™ncia:',
                           ['Rosa', 'Laranja', 'Tomate', 'Verde', 'Azul', 'Cinza'])
    cor_gradiente = gradientes[cor_nome]

# Templates carregados
template_graph = st.session_state.get("template_graph", "white")
template_plotly = st.session_state.get("template_plotly", "plotly_dark")

if template_graph == "white":
    letras_sns = "black"

else:
    letras_sns = "white"

# %% dicionario(s)

dic_uni2 = {
        "Regi√£o de Migra√ß√£o": (
        "A tabela revela a distribui√ß√£o dos profissionais por regi√£o de origem e localiza√ß√£o atual, mostrando uma forte concentra√ß√£o nas regi√µes mais desenvolvidas do Brasil. "
        "A regi√£o Sudeste destaca-se com a maior quantidade de profissionais, com 121 oriundos dessa regi√£o e 235 de outras. Isso sugere que o Sudeste √© um polo central tanto "
        "para a origem quanto para a atual localiza√ß√£o dos profissionais, atraindo um grande n√∫mero de talentos de diversas partes do pa√≠s. Al√©m disso, o Sudeste √© tamb√©m a "
        "principal regi√£o de destino, com destaque para profissionais provenientes de Nordeste e Centro-Oeste.<br><br>"
        
        "O Nordeste tem uma distribui√ß√£o mais equilibrada, com 29 profissionais oriundos da pr√≥pria regi√£o e 135 de outras √°reas. Isso demonstra uma migra√ß√£o consider√°vel para o "
        "Nordeste, que pode ser explicada por fatores como o crescimento de setores e a busca por novas oportunidades nesse territ√≥rio. J√° o Sul tem uma distribui√ß√£o similar, "
        "com 81 profissionais atualmente na regi√£o e 58 oriundos de outros locais. A presen√ßa de profissionais do Centro-Oeste na regi√£o Sul tamb√©m indica um movimento migrat√≥rio, "
        "possivelmente em busca de melhores oportunidades de trabalho.<br><br>"
        
        "Por outro lado, as regi√µes Centro-Oeste e Norte mostram uma concentra√ß√£o maior de profissionais locais. O Centro-Oeste tem 22 profissionais em sua pr√≥pria regi√£o e "
        "12 oriundos de outras √°reas, enquanto o Norte tem 17 na regi√£o e 16 provenientes de outras. Essas duas regi√µes tendem a manter uma maior parte de sua for√ßa de trabalho "
        "local, com uma mobilidade migrat√≥ria mais baixa. A regi√£o Exterior tem uma representa√ß√£o menor, com destaque para a presen√ßa de profissionais provenientes do Sudeste e "
        "Nordeste."
        ),
    }
            
# %% graficos

if 'pregui√ßa' == 'pregui√ßa':
    tabela_migracao = pd.crosstab(df_migracao['Regi√£o de Origem'], df_migracao['Regi√£o Atual'])

    # Normalize the table to get proportions
    tabela_migracao_proporcional = tabela_migracao.div(tabela_migracao.sum(axis=1), axis=0)

    # Let the user choose between Propor√ß√£o and N√∫meros Absolutos
    opcao_selecao = st.radio('Escolha a vers√£o para visualiza√ß√£o:', 
                             ('Propor√ß√£o', 'N√∫meros Absolutos'))

    # Conditional logic to set the table to display based on the user choice
    if opcao_selecao == 'Propor√ß√£o':
        tabela_exibicao = tabela_migracao_proporcional
        titulo_grafico = 'Regi√£o de Origem vs Regi√£o Atual (Propor√ß√£o)'
        fmt = ".2f"  # Format for proportions
    else:
        tabela_exibicao = tabela_migracao
        titulo_grafico = 'Regi√£o de Origem vs Regi√£o Atual (Contagem)'
        fmt = "d"  # Format for absolute counts
    
    # Create the heatmap
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.heatmap(tabela_exibicao, annot=True, cmap=cor_gradiente, fmt=fmt, ax=ax)
    
    # Customize labels and font sizes
    ax.set_title(titulo_grafico, fontsize=16, color=letras_sns)
    ax.set_xlabel('Regi√£o Atual', fontsize=12, color=letras_sns)
    ax.set_ylabel('Regi√£o de Origem', fontsize=12, color=letras_sns)
    ax.tick_params(axis='x', colors=letras_sns)  # x-axis ticks color
    ax.tick_params(axis='y', colors=letras_sns)  # y-axis ticks color
    fig.patch.set_facecolor(template_graph)  # Set background color to black
    
    # Show the plot
    st.pyplot(fig)


    #st.subheader('Tabela de Migra√ß√£o entre Regi√µes')
    #st.write(tabela_migracao)
    st.markdown(dic_uni2['Regi√£o de Migra√ß√£o'], unsafe_allow_html=True)
    
va_pizza = st.selectbox('Escolha uma vari√°vel para o gr√°fico:', sorted(lista_estados))